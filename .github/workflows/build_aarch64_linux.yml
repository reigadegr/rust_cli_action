# Copyright 2024 RustFS Team
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Build and Release Workflow
#
# This workflow builds RustFS binaries and automatically triggers Docker image builds.
#
# Flow:
# 1. Build binaries for multiple platforms
# 2. Upload binaries to OSS storage
# 3. Trigger docker.yml to build and push images using the uploaded binaries
#

name: Release Build aarch64-unknown-linux-musl

on:
  workflow_dispatch:
    inputs:
      TOOLCHAINS:
        type: choice
        description: "‰ΩøÁî®ÁöÑÂ∑•ÂÖ∑Èìæ"
        required: true
        default: "nightly"
        options:
          - "stable"
          - "nightly"
      TARGET:
        type: choice
        description: "ÁºñËØëÁöÑÁõÆÊ†á‰∏âÂÖÉÁªÑ"
        required: true
        default: "aarch64-unknown-linux-musl"
        options:
          - "aarch64-unknown-linux-musl"
          - "x86_64-unknown-linux-musl"
env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  # Optimize build performance
  CARGO_INCREMENTAL: 0

jobs:
  # Build strategy check - determine build type based on trigger
  build-check:
    name: Build Strategy Check
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
      build_type: ${{ steps.check.outputs.build_type }}
      version: ${{ steps.check.outputs.version }}
      short_sha: ${{ steps.check.outputs.short_sha }}
      is_prerelease: ${{ steps.check.outputs.is_prerelease }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Determine build strategy
        id: check
        run: |
          should_build=false
          build_type="none"
          version=""
          short_sha=""
          is_prerelease=false

          # Get short SHA for all builds
          short_sha=$(git rev-parse --short HEAD)

          # Determine build type based on trigger
          if [[ "${{ startsWith(github.ref, 'refs/tags/') }}" == "true" ]]; then
            # Tag push - release or prerelease
            should_build=true
            tag_name="${GITHUB_REF#refs/tags/}"
            version="${tag_name}"

            # Check if this is a prerelease
            if [[ "$tag_name" == *"alpha"* ]] || [[ "$tag_name" == *"beta"* ]] || [[ "$tag_name" == *"rc"* ]]; then
              build_type="prerelease"
              is_prerelease=true
              echo "üöÄ Prerelease build detected: $tag_name"
            else
              build_type="release"
              echo "üì¶ Release build detected: $tag_name"
            fi
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            # Main branch push - development build
            should_build=true
            build_type="development"
            version="dev-${short_sha}"
            echo "üõ†Ô∏è  Development build detected"
          elif [[ "${{ github.event_name }}" == "schedule" ]] || \
               [[ "${{ github.event_name }}" == "workflow_dispatch" ]] || \
               [[ "${{ contains(github.event.head_commit.message, '--build') }}" == "true" ]]; then
            # Scheduled or manual build
            should_build=true
            build_type="development"
            version="dev-${short_sha}"
            echo "‚ö° Manual/scheduled build detected"
          fi

          echo "should_build=$should_build" >> $GITHUB_OUTPUT
          echo "build_type=$build_type" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "short_sha=$short_sha" >> $GITHUB_OUTPUT
          echo "is_prerelease=$is_prerelease" >> $GITHUB_OUTPUT

          echo "üìä Build Summary:"
          echo "  - Should build: $should_build"
          echo "  - Build type: $build_type"
          echo "  - Version: $version"
          echo "  - Short SHA: $short_sha"
          echo "  - Is prerelease: $is_prerelease"

  # Build RustFS binaries
  build-utils:
    name: Build Utils
    needs: [build-check]
    if: needs.build-check.outputs.should_build == 'true'
    runs-on: ${{ matrix.os }}
    timeout-minutes: 120
    env:
      RUSTFLAGS: ${{ matrix.cross == 'false' && '-C target-cpu=native' || '' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            target: ${{ github.event.inputs.TARGET }}
            cross: true
            platform: linux
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Rust environment
        uses: ./.github/actions/setup
        with:
          rust-version: ${{ github.event.inputs.TOOLCHAINS }}
          target: ${{ matrix.target }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          install-cross-tools: ${{ matrix.cross }}

      - name: Configure Git
        run: |
          git config --global user.name "Numbersf"
          git config --global user.email "263623064@qq.com"

      - name: Setup TimeZone
        run: |
          sudo -E rm -rf /etc/localtime
          sudo -E ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime

      - name: Clone utils sources
        run: |
          for i in "starship/starship" \
              "bgreenwell/doxx" \
              "sharkdp/fd" \
              "BurntSushi/ripgrep" \
              "sighol/tree-rs"; do
 
              git clone --depth 1 https://github.com/$i

              cd "$(basename $i)"
              cargo add mimalloc --features no_thp,override
              cd  ..
          done

      - name: Optimize upstream mallocator and optmize level
        run: |
          git init || echo "Êó†ÈúÄinit"
          git clone --depth 1 https://github.com/reigadegr/rust_cli_action self_code
          git add  . && git commit -m "auto commit" || echo "Êó†ÈúÄÊèê‰∫§"          
          for i in "self_code/patchs/*.patch"; do
             i="$(realpath $i)"
             patch -p1 -F 3 < $i && git add  . && git commit -m "auto commit" || git reset --hard && echo "$i Ë°•‰∏ÅÂ∫îÁî®Â§±Ë¥•"
             git clean -df
          done

      - name: Build Rust Utils
        shell: bash
        run: |
          rm -rf ./*/target && echo "Âà†Èô§‰∫Ütarget" || echo "Êó†ÈúÄÂà†Èô§"
          mkdir "${{ matrix.target }}"_utils
          for i in "tree-rs" "ripgrep" "fd" "doxx" "starship"; do
              cd $i

              case "$i" in
                  "tree-rs")
                      bin_name="tree-rs"
                      ;;
                  "ripgrep")
                      bin_name="rg"
                      ;;
                  "fd")
                      bin_name="fd"
                      ;;
                  "doxx")
                      bin_name="doxx"
                      ;;
                  "starship")
                      bin_name="starship"
                      ;;
                  *)
                      echo "Êú™Áü•È°πÁõÆ: $i"
                      exit 1
                      ;;
              esac              
              if [ "${{ github.event.inputs.TOOLCHAINS }}" = "nightly" ]; then
                wget https://github.com/reigadegr/rust_cli_action/raw/main/build_nightly.sh
                sh build_nightly.sh "${{ matrix.target }}" "$bin_name"
              else
                wget https://github.com/reigadegr/rust_cli_action/raw/main/build_stable.sh
                sh build_stable.sh "${{ matrix.target }}" "$bin_name"
              fi

              dd if=target/"${{ matrix.target }}"/release/$bin_name of=../"${{ matrix.target }}"_utils/$bin_name
              rm -rf target
              cd  ..
          done

      - name: Upload to GitHub artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}_utils
          path: ${{ matrix.target }}_utils/*
          retention-days: 3

  # Build summary
  build-summary:
    name: Build Summary
    needs: [build-utils]
    if: always() && needs.build-check.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Build completion summary
        shell: bash
        run: |
          BUILD_TYPE="${{ needs.build-check.outputs.build_type }}"
          VERSION="${{ needs.build-check.outputs.version }}"

          echo "üéâ Build completed successfully!"
          echo "üì¶ Build type: $BUILD_TYPE"
          echo "üî¢ Version: $VERSION"
          echo ""

          # Check build status
          BUILD_STATUS="${{ needs.build-rustfs.result }}"

          echo "üìä Build Results:"
          echo "  üì¶ All platforms: $BUILD_STATUS"
          echo ""

          case "$BUILD_TYPE" in
            "development")
              echo "üõ†Ô∏è  Development build artifacts have been uploaded to OSS dev directory"
              echo "‚ö†Ô∏è  This is a development build - not suitable for production use"
              ;;
            "release")
              echo "üöÄ Release build artifacts have been uploaded to OSS release directory"
              echo "‚úÖ This build is ready for production use"
              echo "üè∑Ô∏è  GitHub Release will be created in this workflow"
              ;;
            "prerelease")
              echo "üß™ Prerelease build artifacts have been uploaded to OSS release directory"
              echo "‚ö†Ô∏è  This is a prerelease build - use with caution"
              echo "üè∑Ô∏è  GitHub Release will be created in this workflow"
              ;;
          esac

          echo ""
